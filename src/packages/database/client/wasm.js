
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  theme: 'theme',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FocusSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startTime: 'startTime',
  duration: 'duration',
  status: 'status'
};

exports.Prisma.AppUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  appName: 'appName',
  timeSpent: 'timeSpent',
  platform: 'platform',
  hourStart: 'hourStart'
};

exports.Prisma.RoutineScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  emoji: 'emoji',
  timeMode: 'timeMode',
  selectedDays: 'selectedDays',
  startTime: 'startTime',
  endTime: 'endTime',
  dailyLimit: 'dailyLimit',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  domains: 'domains',
  androidPackageName: 'androidPackageName',
  iosBundleId: 'iosBundleId',
  category: 'category',
  isUserSubmitted: 'isUserSubmitted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutineAppScalarFieldEnum = {
  routineId: 'routineId',
  appId: 'appId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  task: 'task',
  state: 'state',
  createdAt: 'createdAt',
  index: 'index',
  tags: 'tags',
  scheduledDate: 'scheduledDate'
};

exports.Prisma.CommitmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userPubkey: 'userPubkey',
  amount: 'amount',
  unlockTime: 'unlockTime',
  createdAt: 'createdAt',
  authorityPubkey: 'authorityPubkey',
  status: 'status',
  claimedAt: 'claimedAt',
  forfeitedAt: 'forfeitedAt',
  txSignature: 'txSignature',
  routineId: 'routineId',
  focusSessionId: 'focusSessionId'
};

exports.Prisma.MarketplaceConfigScalarFieldEnum = {
  accountAddress: 'accountAddress',
  authority: 'authority',
  currentPeriodRevenue: 'currentPeriodRevenue',
  totalLifetimeRevenue: 'totalLifetimeRevenue',
  listingCounter: 'listingCounter',
  passCounter: 'passCounter',
  snapshotPeriod: 'snapshotPeriod',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataPassScalarFieldEnum = {
  passId: 'passId',
  buyerAddress: 'buyerAddress',
  startDate: 'startDate',
  endDate: 'endDate',
  maxPricePerDay: 'maxPricePerDay',
  totalPaid: 'totalPaid',
  dataNftMint: 'dataNftMint',
  purchasedAt: 'purchasedAt',
  eligibleSellerCount: 'eligibleSellerCount',
  accountAddress: 'accountAddress',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerkleDistributorScalarFieldEnum = {
  periodId: 'periodId',
  merkleRoot: 'merkleRoot',
  totalPoolBalance: 'totalPoolBalance',
  snapshotTimestamp: 'snapshotTimestamp',
  totalClaims: 'totalClaims',
  claimedAmount: 'claimedAmount',
  accountAddress: 'accountAddress',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSellerScalarFieldEnum = {
  sellerAddress: 'sellerAddress',
  listingId: 'listingId',
  totalRevenue: 'totalRevenue',
  unclaimedRevenue: 'unclaimedRevenue',
  accountAddress: 'accountAddress',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataListingScalarFieldEnum = {
  listingId: 'listingId',
  sellerAddress: 'sellerAddress',
  startDate: 'startDate',
  endDate: 'endDate',
  pricePerDay: 'pricePerDay',
  accountAddress: 'accountAddress',
  isActive: 'isActive',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerProofScalarFieldEnum = {
  sellerAddress: 'sellerAddress',
  periodId: 'periodId',
  amount: 'amount',
  proof: 'proof',
  claimed: 'claimed',
  claimedAt: 'claimedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.FocusSessionStatus = exports.$Enums.FocusSessionStatus = {
  active: 'active',
  completed: 'completed',
  canceled: 'canceled'
};

exports.Platform = exports.$Enums.Platform = {
  mobile: 'mobile',
  web: 'web'
};

exports.TimeMode = exports.$Enums.TimeMode = {
  blocking: 'blocking',
  limit: 'limit'
};

exports.RoutineStatus = exports.$Enums.RoutineStatus = {
  active: 'active',
  completed: 'completed',
  canceled: 'canceled'
};

exports.TaskState = exports.$Enums.TaskState = {
  checked: 'checked',
  unchecked: 'unchecked',
  archived: 'archived'
};

exports.CommitmentStatus = exports.$Enums.CommitmentStatus = {
  active: 'active',
  claimed: 'claimed',
  forfeited: 'forfeited'
};

exports.Prisma.ModelName = {
  User: 'User',
  FocusSession: 'FocusSession',
  AppUsage: 'AppUsage',
  Routine: 'Routine',
  App: 'App',
  RoutineApp: 'RoutineApp',
  Task: 'Task',
  Commitment: 'Commitment',
  MarketplaceConfig: 'MarketplaceConfig',
  DataPass: 'DataPass',
  MerkleDistributor: 'MerkleDistributor',
  DataSeller: 'DataSeller',
  DataListing: 'DataListing',
  SellerProof: 'SellerProof'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
